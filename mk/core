#!/bin/bash (source)
# This file contains the base functions used to write a cookbook

# settings
# =============================================================================
# Turn off bash's hash function
set +h
# Exit immediately if a command exits with an error code
trap 'exit 1' ERR

# download <url> [destination]
# =============================================================================
download() {
  local url=$1
  local destination=$2
  local cmd=""

  case $url in
    http://ftp.gnu.org/gnu/*)
      if [[ -n "$GNU_MIRROR" ]]; then
        local prefix=http://ftp.gnu.org/gnu/
        url="$GNU_MIRROR/${url#$prefix}"
      fi
      ;;
  esac

  if [ -n "$(which wget)" ]; then
    cmd="$(which wget) --no-check-certificate $url"
    if [ -z "$destination" ]; then
      destination=$(basename $url)
    else
      cmd="$cmd -O $destination"
    fi
  else
    echo "missing command wget"
    exit 1
  fi

  [ -f $destination ] || eval $cmd || exit 1
}

# extract <archive> [destination]
# =============================================================================
extract() {
  local file=$1
  local destination=$2
  local cmd

  case $file in
    *.tgz | *.tar.gz)
      cmd="tar -xzf $file"
      if [ -n "$destination" ]; then
        cmd="$cmd --strip 1 -C $destination"
      fi
      ;;
    *.tar.bz2)
      cmd="tar -xjf $file"
      if [ -n "$destination" ]; then
        cmd="$cmd --strip 1 -C $destination"
      fi
      ;;
    *.tar.xz)
      cmd="tar -xJf $file"
      if [ -n "$destination" ]; then
        cmd="$cmd --strip 1 -C $destination"
      fi
      ;;
    *.zip)
      cmd="unzip $file"
      if [ -n "$destination" ]; then
        cmd="$cmd -d $destination"
      fi
      ;;
    *)
      echo "unknown type of archive for file '$file'"
      exit 1
  esac

  if [[ -z "$destination" ]]; then
    echo "extracting '$file'"
    eval $cmd || exit 1
  else
    echo "extracting '$file' in '$destination'"
    [[ -e "$destination" ]] || eval $cmd || exit 1
  fi
}

# mktmpdir
# =============================================================================
mktmpdir() {
  echo "$(mktemp -d)"
}

# strip_unneeded <directory>
# =============================================================================
strip_unneeded() {
  find $1 | xargs file | grep "executable" | grep "ELF" | cut -f 1 -d : | \
    xargs strip --strip-unneeded --verbose 2> /dev/null
  find $1 | xargs file | grep "shared object" | grep "ELF" | cut -f 1 -d : | \
    xargs strip --strip-unneeded --verbose 2> /dev/null
}

# compress_manpages <directory>
# =============================================================================
compress_manpages() {
  pushd $1
  for manpagedir in $(find . -maxdepth 1 -mindepth 1 -type d); do
    # manage the links
    for eachpage in $( find $manpagedir -maxdepth 1 -mindepth 1 -type l) ; do
      ln -s $(readlink $eachpage).gz $eachpage.gz
      rm $eachpage
    done
    # compress the pages
    gzip --verbose -9 $manpagedir/*.?
  done
  popd
}

# clean_empty_dirs <directory>
# =============================================================================
clean_empty_dirs() {
  find $1 -depth -type d -empty -exec rmdir -v {} \;
}
