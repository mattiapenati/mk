#!/bin/bash

# Build dependencies:
#   m4       used by bison and old versions of M4 are buggy
#   bison    used by gold in binutils
#   texinfo  used to build the documentation

# All the packages are build using these common flags:
#   --disable-nls
#     Disables internationalization.
#   --disable-multilib
#     This option disables the building of a multilib capabilities (only 64bit)

run() {
  pkgname=gcc-glibc
  pkgver=$1

  # getting the versions
  case $pkgver in
    4.8)
      gccver=4.8.5
      gccsum=de144b551f10e23d82f30ecd2d6d0e18c26f8850
      islver=0.11.1
      islsum=d7936929c3937e03f09b64c3c54e49422fa8ddb3
      cloog=yes
      ;;
    4.9)
      gccver=4.9.3
      gccsum=2e6490a908eac8b2b56b73679bd7c2a5237df1f8
      islver=0.12.2
      islsum=ca98a91e35fb3ded10d080342065919764d6f928
      cloog=yes
      ;;
    5)
      gccver=5.2.0
      gccsum=fe3f5390949d47054b613edc36c557eb1d51c18e
      islver=0.14.1
      islsum=b653327b20e807d1df3a7e2f546ea924f1e030c0
      cloog=no
      ;;
    *)
      if [[ -z "$pkgver" ]]; then
        error "Specify a valid version (4.8|4.9|5) for gcc"
      else
        error "Unsupported version '$pkgver'"
      fi
      exit 1
      ;;
  esac

  m4ver=1.4.17
  m4dir=m4-$m4ver
  m4archive=m4-$m4ver.tar.xz
  m4url=http://ftpmirror.gnu.org/m4/$m4archive
  m4sum=74ad71fa100ec8c13bc715082757eb9ab1e4bbb0

  bisonver=3.0.4
  bisondir=bison-$bisonver
  bisonarchive=bison-$bisonver.tar.xz
  bisonurl=http://ftpmirror.gnu.org/bison/$bisonarchive
  bisonsum=8270497aad88c7dd4f2c317298c50513fb0c3c8e

  texinfover=6.0
  texinfodir=texinfo-$texinfover
  texinfoarchive=texinfo-$texinfover.tar.xz
  texinfourl=http://ftpmirror.gnu.org/texinfo/$texinfoarchive
  texinfosum=39d9b15029a49c4ac106e7686b87d374a99c207f

  binutilsver=2.25
  binutilsdir=binutils-$binutilsver
  binutilsarchive=binutils-$binutilsver.tar.bz2
  binutilsurl=http://ftpmirror.gnu.org/binutils/$binutilsarchive
  binutilssum=b46cc90ebaba7ffcf6c6d996d60738881b14e50d

  gmpver=6.0.0
  gmpdir=gmp-$gmpver
  gmparchive=gmp-${gmpver}a.tar.bz2
  gmpurl=http://ftpmirror.gnu.org/gmp/$gmparchive
  gmpsum=360802e3541a3da08ab4b55268c80f799939fddc

  mpfrver=3.1.3
  mpfrdir=mpfr-$mpfrver
  mpfrarchive=mpfr-$mpfrver.tar.bz2
  mpfrurl=http://ftpmirror.gnu.org/mpfr/$mpfrarchive
  mpfrsum=3e46c5ce43701f2f36f9d01f407efe081700da80

  mpcver=1.0.3
  mpcdir=mpc-$mpcver
  mpcarchive=mpc-$mpcver.tar.gz
  mpcurl=http://ftpmirror.gnu.org/mpc/$mpcarchive
  mpcsum=b8be66396c726fdc36ebb0f692ed8a8cca3bcc66

  isldir=isl-$islver
  islarchive=isl-$islver.tar.bz2
  islurl=http://isl.gforge.inria.fr/$islarchive

  cloogver=0.18.1
  cloogdir=cloog-$cloogver
  cloogarchive=cloog-$cloogver.tar.gz
  cloogurl=http://www.bastoul.net/cloog/pages/download/$cloogarchive
  cloogsum=2dc70313e8e2c6610b856d627bce9c9c3f848077

  libelfver=0.8.13
  libelfdir=libelf-$libelfver
  libelfarchive=libelf-$libelfver.tar.gz
  libelfurl=http://www.mr511.de/software/$libelfarchive
  libelfsum=c1d6ac5f182d19dd685c4dfd74eedbfe3992425d

  gccdir=gcc-$gccver
  gccarchive=gcc-$gccver.tar.bz2
  gccurl=http://ftpmirror.gnu.org/gcc/gcc-$gccver/$gccarchive

  linuxver=$(uname -r)
  case $linuxver in
    2.6.32*)
      linux=2.6.32
      linuxver=2.6.32.66
      linuxurl=https://www.kernel.org/pub/linux/kernel/v2.6/longterm/v2.6.32
      linuxsum=a22b5875a673586566e1b0c89d26fe12d6f41237
      ;;
    3.10* | 3.11*)
      linux=3.10
      linuxver=3.10.80
      linuxurl=https://www.kernel.org/pub/linux/kernel/v3.x
      ;;
    3.12* | 3.13*)
      linux=3.12
      linuxver=3.12.43
      linuxurl=https://www.kernel.org/pub/linux/kernel/v3.x
      linuxsum=32bba2bbecab9e0eac1e6e5386440f2e57ebf55a
      ;;
    *)
      error "Unsupported version of kernel '$linuxver'"
      exit 1
  esac
  linuxdir=linux-$linuxver
  linuxarchive=linux-$linuxver.tar.xz
  linuxurl=$linuxurl/$linuxarchive

  glibcver=2.21
  glibcdir=glibc-$glibcver
  glibcarchive=glibc-$glibcver.tar.xz
  glibcurl=http://ftpmirror.gnu.org/glibc/$glibcarchive
  glibcsum=1157be3fe63baa81b7ba104a103337775a6ed06f

  # cleaning and creating the directories hierarchy
  dstdir=$PREFIX/pkgs/toolchains/$pkgname/$pkgver
  module=$PREFIX/modules/toolchains/$pkgname/$pkgver.lua

  rm -vrf $dstdir
  rm -vf $module
  install -dm 0755 $(dirname $module)
  install -dm 0755 $dstdir/{base,modules,pkgs,prefix}

  prefix=$dstdir/prefix
  base=$dstdir/base

  # setting the environment variables
  export PATH=$prefix/bin:$tmpdir/tools/bin:$PATH

  # download and check the source files
  download $m4url
  check $m4archive $m4sum

  download $bisonurl
  check $bisonarchive $bisonsum

  download $texinfourl
  check $texinfoarchive $texinfosum

  download $binutilsurl
  check $binutilsarchive $binutilssum

  download $gmpurl
  check $gmparchive $gmpsum

  download $mpfrurl
  check $mpfrarchive $mpfrsum

  download $mpcurl
  check $mpcarchive $mpcsum

  download $islurl
  check $islarchive $islsum

  [[ "$cloog" == "yes" ]] && download $cloogurl
  [[ "$cloog" == "yes" ]] && check $cloogarchive $cloogsum

  download $libelfurl
  check $libelfarchive $libelfsum

  download $gccurl
  check $gccarchive $gccsum

  download $linuxurl
  check $linuxarchive $linuxsum

  download $glibcurl
  check $glibcarchive $glibcsum

  # extract source files
  extract $m4archive
  extract $bisonarchive
  extract $texinfoarchive
  extract $binutilsarchive
  extract $gmparchive
  extract $mpfrarchive
  extract $mpcarchive
  extract $islarchive
  [[ "$cloog" == "yes" ]] && extract $cloogarchive
  extract $libelfarchive
  extract $gccarchive
  extract $linuxarchive
  extract $glibcarchive

  # patching the source
  pushd $binutilsdir
    # (2.25) https://sourceware.org/bugzilla/show_bug.cgi?id=16992
    [[ -r $srcdir/binutils-$binutilsver.patch ]] && \
      patch -p1 -i $srcdir/binutils-$binutilsver.patch
  popd
  make -C $linuxdir mrproper
  [[ -d $gmpdir ]] && ln -vs ../$gmpdir $gccdir/gmp
  [[ -d $mpfrdir ]] && ln -vs ../$mpfrdir $gccdir/mpfr
  [[ -d $mpcdir ]] && ln -vs ../$mpcdir $gccdir/mpc
  [[ -d $isldir ]] && ln -vs ../$isldir $gccdir/isl
  [[ -d $cloogdir ]] && ln -vs ../$cloogdir $gccdir/cloog
  [[ -d $libelfdir ]] && ln -vs ../$libelfdir $gccdir/libelf
  case $ARCH in
    x86_64)  sed -i "/m64=/s/lib64/lib/" \
               $gccdir/gcc/config/i386/t-linux64
             sed -i "s:lib64:lib:g;s:/lib:$prefix/lib:g" \
               $gccdir/gcc/config/i386/linux64.h
             echo "#define STANDARD_STARTFILE_PREFIX_1 \"$prefix/lib\"" \
               >> $gccdir/gcc/config/i386/linux64.h
             echo "#define STANDARD_STARTFILE_PREFIX_2 \"$base/lib\"" \
               >> $gccdir/gcc/config/i386/linux64.h
             ;;
  esac

  # compile the build dependecies
  message "Installing M4"
  pushd $m4dir
    ./configure --prefix="$tmpdir/tools"; make install
  popd

  message "Installing Bison"
  pushd $bisondir
    ./configure --prefix="$tmpdir/tools"; make install
  popd

  message "Installing Texinfo"
  pushd $texinfodir
    ./configure --prefix="$tmpdir/tools"; make install
  popd

  # check build dependencies installation
  case "$(command -v m4)" in
    "$tmpdir/tools"*) ;;
    *) error "M4 is not installed properly"; exit 1
  esac
  case "$(command -v yacc)" in
    "$tmpdir/tools"*) ;;
    *) error "Bison is not installed properly"; exit 1
  esac
  case "$(command -v makeinfo)" in
    "$tmpdir/tools"*) ;;
    *) error "Texinfo is not installed properly"; exit 1
  esac

  # compile the cross compiler
  message "Compiling the cross compiler [Binutils]"
  mkdir binutils-build
  pushd binutils-build
    # AR=$(which ar)
    #   RedHat does not install the $BUILD-* binutils.
    # --build=$BUILD --host=$BUILD --target=$TARGET
    #   Enable the cross compiling with correct parameters
    # --prefix="$tmpdir/tools"
    #   Install binutils programs in '$tmpdir/tools' directory
    # --with-lib-path="$prefix/lib"
    #   Specifies which library path the linker should be configured to use.
    # --enable-ld --disable-gold
    #   Enable the standard linker and disable gold.
    AR=$(which ar) \
    ../$binutilsdir/configure --build=$BUILD --host=$BUILD --target=$TARGET \
                              --prefix="$tmpdir/tools" \
                              --with-lib-path="$prefix/lib" \
                              --disable-nls --disable-multilib \
                              --enable-ld --disable-gold
    make
    make install
  popd
  rm -rf binutils-build

  message "Compiling the cross compiler [GCC]"
  mkdir gcc-build
  pushd gcc-build
    # --build=$BUILD --host=$BUILD --target=$TARGET
    #   Enable the cross compiling with correct parameters
    # --prefix="$tmpdir/tools"
    #   Install GCC programs in '$tmpdir/tools' directory
    # --with-native-system-header-dir="$prefix/include"
    #   Ensures that GCC will find system headers correctly.
    # --with-newlib --without-headers
    #   Prevents the compiling of any code that requires libc support.
    # --enable-languages=c,c++
    #   This option ensures that only the C and C++ compilers are built.
    # --disable-threads --disable-decimal-float --disable-libatomic
    # --disable-libcilkrts --disable-libgomp --disable-libitm
    # --disable-libmudflap --disable-libquadmath --disable-libsanitizer
    # --disable-libssp --disable-libvtv --disable-libstdc__-v3
    #   Disable support for unused libraries for the bootstrap.
    ../$gccdir/configure --build=$BUILD --host=$BUILD --target=$TARGET \
                         --prefix="$tmpdir/tools" \
                         --with-native-system-header-dir="$prefix/include" \
                         --disable-nls --disable-multilib --disable-shared \
                         --with-newlib --without-headers \
                         --enable-languages=c,c++ \
                         --disable-threads --disable-decimal-float --disable-libatomic \
                         --disable-libcilkrts --disable-libgomp --disable-libitm \
                         --disable-libmudflap --disable-libquadmath --disable-libsanitizer \
                         --disable-libssp --disable-libvtv --disable-libstdc__-v3
    make
    make install
  popd
  rm -rf gcc-build

  # install linux header files and compile the C standard library
  message "Installing the Linux headers"
  pushd $linuxdir
    make ARCH="$ARCH" INSTALL_HDR_PATH="$prefix" headers_install
  popd
  rm -rf $linuxdir

  message "Compiling the native Glibc standard library"
  mkdir glibc-build
  pushd glibc-build
    # this prevent to use lib64 directory
    echo "slibdir=$prefix/lib" >> configparms
    echo "rtlddir=$prefix/lib" >> configparms
    # --build=$BUILD --host=$TARGET --with-binutils="$tmpdir/tools/bin"
    #   Enables the cross compilation, using the just installed Binutils.
    # --prefix="$prefix" --libdir="$prefix/lib" --libexecdir="$prefix/lib"
    #   Install GLibc in '$prefix' directory
    # --with-pkgversion="$PKGVERSION" --with-bugurl="$BUGURL"
    #   Customize the information.
    # --with-headers="$prefix/include" --enable-kernel=$linux
    #   Compiles the GLibc using the headers just installed.
    # --enable-add-ons
    #   Compiles the extensions.
    # --disable-profile
    #   This builds the libraries without profiling information.
    # --enable-obsolete-rpc
    #   This installs NIS and RPC related headers that are not installed by
    #   default. They are required to build other libraries.
    # libc_cv_ssp=no libc_cv_forced_unwind=yes
    #   https://sourceware.org/ml/libc-alpha/2012-09/msg00093.html
    #   Seems to be required to bootstrap a cross compiler.
    ../$glibcdir/configure --build=$BUILD --host=$TARGET --with-binutils="$tmpdir/tools/bin" \
                           --prefix="$prefix" --libdir="$prefix/lib" --libexecdir="$prefix/lib" \
                           --with-pkgversion="$PKGVERSION" --with-bugurl="$BUGURL" \
                           --with-headers="$prefix/include" --enable-kernel=$linux \
                           --disable-nls \
                           --enable-add-ons --disable-profile --enable-obsolete-rpc \
                           libc_cv_ssp=no libc_cv_forced_unwind=yes
    make
    make install
  popd
  rm -rf glibc-build
  rm -rf $glibcdir

  # TODO fix ldd script RTLDLIST="$prefix/lib/ld-linux-x86-64.so.2"
  # fix ldd script
  case $ARCH in
    x86_64) sed -e "s:RTLDLIST=.*:RTLDLIST=\"$prefix/lib/ld-linux-x86-64.so.2\":" \
                -i "$prefix"/bin/ldd;;
  esac

  # compile the C++ standard library
  message "Compile the temporary C++ standard library"
  mkdir gcc-build
  pushd gcc-build
    # CC="$TARGET-gcc -isystem $prefix/include -B$prefix/lib"
    # CXX="$TARGET-g++ -isystem $prefix/include -B$prefix/lib"
    #   Use the just installed compilers with the new libraries.
    # --build=$BUILD --host=$TARGET
    #   This combination enables the cross compilation.
    # --prefix=$prefix --with-gxx-include-dir=$tmpdir/tools/$TARGET/include/c++/$gccver
    #   Install stdc++-v3 in $prefix directory and the headers in '$tmpdir/tools'.
    # --disable-libstdcxx-pch
    #   This switch prevents the installation of precompiled include files.
    CC="$TARGET-gcc -isystem $prefix/include -B$prefix/lib" \
    CXX="$TARGET-g++ -isystem $prefix/include -B$prefix/lib" \
    ../$gccdir/libstdc++-v3/configure \
      --build=$BUILD --host=$TARGET \
      --prefix=$prefix --with-gxx-include-dir=$tmpdir/tools/$TARGET/include/c++/$gccver \
      --disable-nls --disable-multilib --disable-libstdcxx-pch
    make
    make install
  popd
  rm -rf gcc-build

  # compile the native compiler
  message "Compile the native compiler [Binutils]"
  mkdir binutils-build
  pushd binutils-build
    # CC="$TARGET-gcc -isystem $prefix/include -B$prefix/lib"
    # CXX="$TARGET-g++ -isystem $prefix/include -B$prefix/lib"
    # AS="$TARGET-as" AR="$TARGET-ar"
    #   Use the just installed compilers with the new libraries.
    # --build=$TARGET
    #   Built for the given target.
    # --prefix="$prefix" --with-lib-path="$prefix/lib:$base/lib"
    #   Install binutils programs in '$prefix' directory.
    # --with-pkgversion="$PKGVERSION" --with-bugurl="$BUGURL"
    #   Customize the information.
    # --enable-ld --enable-gold --enable-plugins
    #   Enables both the standard and Google linker, and also the plugins.
    # --disable-werror
    #   It does not convert warning to error.
    CC="$TARGET-gcc -isystem $prefix/include -B$prefix/lib" \
    CXX="$TARGET-g++ -isystem $prefix/include -B$prefix/lib" \
    AS="$TARGET-as" AR="$TARGET-ar" \
   ../$binutilsdir/configure --build=$TARGET \
                             --prefix="$prefix" --with-lib-path="$prefix/lib:$base/lib" \
                             --with-pkgversion="$PKGVERSION" --with-bugurl="$BUGURL" \
                             --disable-nls --disable-multilib \
                             --enable-ld --enable-gold --enable-plugins \
                             --disable-werror
    make
    make install
  popd
  rm -rf binutils-build
  rm -rf $binutilsdir

  rm "$prefix"/bin/ld; ln -s ld.bfd "$prefix"/bin/ld

  ln -s ../../lib/crt1.o $prefix/$TARGET/lib/crt1.o
  ln -s ../../lib/crti.o $prefix/$TARGET/lib/crti.o
  ln -s ../../lib/crtn.o $prefix/$TARGET/lib/crtn.o

  message "Compile the native compiler [GCC]"
  mkdir gcc-build
  pushd gcc-build
    # CC="$TARGET-gcc -isystem $prefix/include -B$prefix/lib"
    # CXX="$TARGET-g++ -isystem $prefix/include -B$prefix/lib"
    #   Use the just installed compilers with the new libraries.
    # --build=$TARGET
    #   Built for the given target.
    # --prefix="$prefix" --with-local-prefix="$base"
    # --with-native-system-header-dir="$prefix/include"
    #   Install GCC programs in '$prefix' directory, using '$base' as local
    #   directory.
    # --with-pkgversion="$PKGVERSION" --with-bugurl="$BUGURL"
    #   Customize the information.
    # --enable-threads=posix --enable-__cxa_atexit --enable-lto --enable-libgomp
    #   Addons enabled.
    # --disable-libstdcxx-pch
    #   This switch prevents the installation of precompiled include files.
    # --enable-bootstrap
    #   Enable a complete bootstrap for the compiler.
    # --enable-languages=c,c++,fortran
    #   This option ensures that only the C, C++ and Fortran compilers are built.
    CC="$TARGET-gcc -isystem $prefix/include -B$prefix/lib" \
    CXX="$TARGET-g++ -isystem $prefix/include -B$prefix/lib" \
    ../$gccdir/configure --build=$TARGET \
                         --prefix="$prefix" --with-local-prefix="$base" \
                         --with-native-system-header-dir="$prefix/include" \
                         --with-pkgversion="$PKGVERSION" --with-bugurl="$BUGURL" \
                         --disable-nls --disable-multilib \
                         --enable-shared \
                         --enable-threads=posix --enable-__cxa_atexit \
                         --enable-lto --enable-libgomp \
                         --disable-libstdcxx-pch \
                         --enable-bootstrap \
                         --enable-languages=c,c++,fortran
    # LIBRARY_PATH=$prefix/lib
    #   The path of the libraries used during the bootstrap for the link step.
    LIBRARY_PATH=$prefix/lib make
    make install
  popd
  rm -rf gcc-build
  rm -rf $gccdir
  rm -rf $libelfdir $cloogdir $isldir $mpcdir $mpfrdir $gmpdir

  # finishing the installation
  rm "$prefix"/bin/$TARGET-gcc; ln -s $TARGET-gcc-$gccver "$prefix"/bin/$TARGET-gcc
  ln -s $TARGET-gcc $prefix/bin/$TARGET-cc
  rm "$prefix"/bin/gcc; ln -s $TARGET-gcc "$prefix"/bin/gcc
  ln -s $TARGET-cc $prefix/bin/cc

  rm "$prefix"/bin/$TARGET-c++; ln -s $TARGET-g++ "$prefix"/bin/$TARGET-c++
  rm "$prefix"/bin/g++; ln -s $TARGET-c++ "$prefix"/bin/g++
  rm "$prefix"/bin/c++; ln -s $TARGET-c++ "$prefix"/bin/c++

  rm "$prefix"/bin/gfortran; ln -s $TARGET-gfortran "$prefix"/bin/gfortran
  ln -s gfortran "$prefix"/bin/f95

  for exe in ar nm ranlib; do
    rm "$prefix"/bin/gcc-$exe; ln -s $TARGET-gcc-$exe "$prefix"/bin/gcc-$exe
  done

  cat > $prefix/bin/c89 <<"EOF"
#!/bin/sh
fl="-std=c89"
for opt; do
  case "$opt" in
    -ansi|-std=c89|-std=iso9899:1990) fl="";;
    -std=*) echo "`basename $0` called with non ANSI/ISO C option $opt" >&2; exit 1;;
  esac
done
exec cc $fl ${1+"$@"}
EOF

  cat > $prefix/bin/c99 <<"EOF"
#!/bin/sh
fl="-std=c99"
for opt; do
  case "$opt" in
    -std=c99|-std=iso9899:1999) fl="";;
    -std=*) echo "`basename $0` called with non ISO C99 option $opt" >&2; exit 1;;
  esac
done
exec cc $fl ${1+"$@"}
EOF

  chmod 755 $prefix/bin/c{8,9}9

  install -dm 0755 $prefix/share/gdb/auto-load
  mv $prefix/lib/libstdc++.so.6.*-gdb.py $prefix/share/gdb/auto-load

  install -dm755 $prefix/lib/bfd-plugins
  ln -sf ../../libexec/gcc/$TARGET/$gccver/liblto_plugin.so $prefix/lib/bfd-plugins

  echo "$base/lib" > $prefix/etc/ld.so.conf
  $prefix/sbin/ldconfig

  # create the module file
  cat > $module << EOF
-- -*- lua -*-
whatis("Loads the toolchain based on GCC $pkgver and GLibC library.")
help([[
This module loads the toolchain based on GCC $pkgver and GLibC library. Moreover
it contains all the base packages for the development, for the details about the
installed software see the main documentation.
]])

-- commands and libraries
prepend_path("PATH", "$prefix/bin")
prepend_path("PATH", "$base/bin")

-- documentation
prepend_path("MANPATH", "$prefix/share/man")
prepend_path("MANPATH", "$base/share/man")
prepend_path("INFOPATH", "$prefix/share/info")
prepend_path("INFOPATH", "$base/share/info")

-- configuration
prepend_path("ACLOCAL_PATH", "$base/share/aclocal")

-- module
family("toolchain")

prepend_path("MODULEPATH", "$dstdir/modules")

setenv("mkToolchain", "$pkgname/$pkgver")
setenv("mkToolchainPrefix", "$prefix")
setenv("mkToolchainBase", "$base")
setenv("mkToolchainModules", "$dstdir/modules")
setenv("mkToolchainPkgs", "$dstdir/pkgs")
EOF

  # cleaning
  message "Cleaning up"
  rm -f $prefix/$TARGET/lib/crt{1,i,n}.o
  rm -rf $prefix/share/locale

  strip $prefix
  compress_doc $prefix/share/{man,info}

  case $pkgver in
    4.8) for lib in asan gfortran tsan; do
           reset_rpath "$prefix"/lib/lib$lib.so.?.?.?
         done;;
    4.9) for lib in asan cilkrts gfortran lsan tsan ubsan; do
           reset_rpath "$prefix"/lib/lib$lib.so.?.?.?
         done;;
    5)   for lib in asan cc1 cilkrts gfortran gomp-plugin-host_nonshm lsan tsan ubsan; do
           reset_rpath "$prefix"/lib/lib$lib.so.?.?.?
         done
         reset_rpath "$prefix"/lib/gcc/$TARGET/$gccver/plugin/libcc1plugin.so.?.?.?;;
  esac
}
