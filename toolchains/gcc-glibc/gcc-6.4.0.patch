diff -Naur a/libgcc/config/aarch64/linux-unwind.h b/libgcc/config/aarch64/linux-unwind.h
--- a/libgcc/config/aarch64/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/aarch64/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -52,7 +52,7 @@
   struct rt_sigframe
   {
     siginfo_t info;
-    struct ucontext uc;
+    ucontext_t uc;
   };
 
   struct rt_sigframe *rt_;
diff -Naur a/libgcc/config/alpha/linux-unwind.h b/libgcc/config/alpha/linux-unwind.h
--- a/libgcc/config/alpha/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/alpha/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -51,7 +51,7 @@
     {
       struct rt_sigframe {
 	siginfo_t info;
-	struct ucontext uc;
+	ucontext_t uc;
       } *rt_ = context->cfa;
       sc = &rt_->uc.uc_mcontext;
     }
diff -Naur a/libgcc/config/bfin/linux-unwind.h b/libgcc/config/bfin/linux-unwind.h
--- a/libgcc/config/bfin/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/bfin/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -52,7 +52,7 @@
 	void *puc;
 	char retcode[8];
 	siginfo_t info;
-	struct ucontext uc;
+	ucontext_t uc;
       } *rt_ = context->cfa;
 
       /* The void * cast is necessary to avoid an aliasing warning.
diff -Naur a/libgcc/config/i386/linux-unwind.h b/libgcc/config/i386/linux-unwind.h
--- a/libgcc/config/i386/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/i386/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -58,7 +58,7 @@
   if (*(unsigned char *)(pc+0) == 0x48
       && *(unsigned long long *)(pc+1) == RT_SIGRETURN_SYSCALL)
     {
-      struct ucontext *uc_ = context->cfa;
+      ucontext_t *uc_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
          because it does not alias anything.  */
@@ -138,7 +138,7 @@
 	siginfo_t *pinfo;
 	void *puc;
 	siginfo_t info;
-	struct ucontext uc;
+	ucontext_t uc;
       } *rt_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
diff -Naur a/libgcc/config/m68k/linux-unwind.h b/libgcc/config/m68k/linux-unwind.h
--- a/libgcc/config/m68k/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/m68k/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -33,7 +33,7 @@
 /* <sys/ucontext.h> is unfortunately broken right now.  */
 struct uw_ucontext {
 	unsigned long	  uc_flags;
-	struct ucontext  *uc_link;
+	ucontext_t  *uc_link;
 	stack_t		  uc_stack;
 	mcontext_t	  uc_mcontext;
 	unsigned long	  uc_filler[80];
diff -Naur a/libgcc/config/nios2/linux-unwind.h b/libgcc/config/nios2/linux-unwind.h
--- a/libgcc/config/nios2/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/nios2/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -38,7 +38,7 @@
 
 struct nios2_ucontext {
   unsigned long uc_flags;
-  struct ucontext *uc_link;
+  ucontext_t *uc_link;
   stack_t uc_stack;
   struct nios2_mcontext uc_mcontext;
   sigset_t uc_sigmask;	/* mask last for extensibility */
diff -Naur a/libgcc/config/pa/linux-unwind.h b/libgcc/config/pa/linux-unwind.h
--- a/libgcc/config/pa/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/pa/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -80,7 +80,7 @@
   struct sigcontext *sc;
   struct rt_sigframe {
     siginfo_t info;
-    struct ucontext uc;
+    ucontext_t uc;
   } *frame;
 
   /* rt_sigreturn trampoline:
diff -Naur a/libgcc/config/sh/linux-unwind.h b/libgcc/config/sh/linux-unwind.h
--- a/libgcc/config/sh/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/sh/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -180,7 +180,7 @@
     {
       struct rt_sigframe {
 	siginfo_t info;
-	struct ucontext uc;
+	ucontext_t uc;
       } *rt_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
diff -Naur a/libgcc/config/tilepro/linux-unwind.h b/libgcc/config/tilepro/linux-unwind.h
--- a/libgcc/config/tilepro/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/tilepro/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -61,7 +61,7 @@
   struct rt_sigframe {
     unsigned char save_area[C_ABI_SAVE_AREA_SIZE];
     siginfo_t info;
-    struct ucontext uc;
+    ucontext_t uc;
   } *rt_;
 
   /* Return if this is not a signal handler.  */
diff -Naur a/libgcc/config/xtensa/linux-unwind.h b/libgcc/config/xtensa/linux-unwind.h
--- a/libgcc/config/xtensa/linux-unwind.h	2016-01-04 15:30:50.000000000 +0100
+++ b/libgcc/config/xtensa/linux-unwind.h	2018-03-01 14:46:34.000000000 +0100
@@ -67,7 +67,7 @@
 
   struct rt_sigframe {
     siginfo_t info;
-    struct ucontext uc;
+    ucontext_t uc;
   } *rt_;
 
   /* movi a2, __NR_rt_sigreturn; syscall */
diff -Naur a/libsanitizer/sanitizer_common/sanitizer_linux.cc b/libsanitizer/sanitizer_common/sanitizer_linux.cc
--- a/libsanitizer/sanitizer_common/sanitizer_linux.cc	2015-11-23 10:07:18.000000000 +0100
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.cc	2018-03-01 14:46:34.000000000 +0100
@@ -546,8 +546,7 @@
 }
 #endif
 
-uptr internal_sigaltstack(const struct sigaltstack *ss,
-                         struct sigaltstack *oss) {
+uptr internal_sigaltstack(const void *ss, void *oss) {
   return internal_syscall(SYSCALL(sigaltstack), (uptr)ss, (uptr)oss);
 }
 
diff -Naur a/libsanitizer/sanitizer_common/sanitizer_linux.h b/libsanitizer/sanitizer_common/sanitizer_linux.h
--- a/libsanitizer/sanitizer_common/sanitizer_linux.h	2015-10-21 09:32:45.000000000 +0200
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.h	2018-03-01 14:46:34.000000000 +0100
@@ -19,7 +19,6 @@
 #include "sanitizer_platform_limits_posix.h"
 
 struct link_map;  // Opaque type returned by dlopen().
-struct sigaltstack;
 
 namespace __sanitizer {
 // Dirent structure for getdents(). Note that this structure is different from
@@ -28,8 +27,7 @@
 
 // Syscall wrappers.
 uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count);
-uptr internal_sigaltstack(const struct sigaltstack* ss,
-                          struct sigaltstack* oss);
+uptr internal_sigaltstack(const void* ss, void* oss);
 uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,
     __sanitizer_sigset_t *oldset);
 void internal_sigfillset(__sanitizer_sigset_t *set);
diff -Naur a/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc b/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc
--- a/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc	2015-10-21 09:32:45.000000000 +0200
+++ b/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc	2018-03-01 14:46:34.000000000 +0100
@@ -267,7 +267,7 @@
 
   // Alternate stack for signal handling.
   InternalScopedBuffer<char> handler_stack_memory(kHandlerStackSize);
-  struct sigaltstack handler_stack;
+  stack_t handler_stack;
   internal_memset(&handler_stack, 0, sizeof(handler_stack));
   handler_stack.ss_sp = handler_stack_memory.data();
   handler_stack.ss_size = kHandlerStackSize;
diff -Naur a/libsanitizer/tsan/tsan_platform_linux.cc b/libsanitizer/tsan/tsan_platform_linux.cc
--- a/libsanitizer/tsan/tsan_platform_linux.cc	2016-08-12 10:53:46.000000000 +0200
+++ b/libsanitizer/tsan/tsan_platform_linux.cc	2018-03-01 14:47:47.000000000 +0100
@@ -291,7 +291,7 @@
 int ExtractResolvFDs(void *state, int *fds, int nfd) {
 #if SANITIZER_LINUX
   int cnt = 0;
-  __res_state *statp = (__res_state*)state;
+  struct __res_state *statp = (struct __res_state*)state;
   for (int i = 0; i < MAXNS && cnt < nfd; i++) {
     if (statp->_u._ext.nsaddrs[i] && statp->_u._ext.nssocks[i] != -1)
       fds[cnt++] = statp->_u._ext.nssocks[i];
