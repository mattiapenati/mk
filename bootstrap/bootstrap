#!/bin/bash

# Copyright (c) 2015, Mattia Penati <mattia.penati@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# source the configuration
# =============================================================================
DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)
. $DIR/bootstrap.conf

# check for the dependencies: curl, tar, gzip, bzip2
# =============================================================================
for cmd in curl tar gzip bzip2; do
  hash $cmd &> /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Unable to meet the requirement '$cmd'" 1>&2
    exit 1
  fi
done

error() {
  echo "$@" 1>&2
}

prompt() {
  while true; do
    read -p "$@ [y/n] " yn
    case $yn in
      [Yy]*) return 0;;
      [Nn]*) return 1;;
      *) echo "Please answer yes or no.";;
    esac
  done
}

download() {
  local url=$1
  local output=$2
  [[ -z "$output" ]] && output=$(basename $url)
  case "$1" in
    http*)  curl -qb "" -LC - -o $output $url;;
    ftp*)   curl -qC - --ftp-pasv -o $output $url;;
    *)      error "Unknown protocol for '$1'"; exit 1;;
  esac
}

mktmpdir() {
  echo "$(mktemp -d)"
}

extract() {
  case "$1" in
    *.tgz|*.tar.gz)  tar -xzf $1;;
    *.tar.bz2)       tar -xjf $1;;
    *.tar.xz)        tar -xJf $1;;
    *)               error "Unsupported archive '$1'"; exit 1;;
  esac
}

usage() {
  echo "Bootstrap or update the module system."
  echo ""
  echo "Usage:"
  echo "  bootstrap [options] <prefix>"
  echo "  bootstrap -h | --help"
  echo "  bootstrap -v | --version"
  echo ""
  echo "Options:"
  echo "  -h | --help     Show this help message"
  echo "  -v | --version  Show version"
  echo "  --update        Update the system instead of to install a new one."
  echo "                  The configuration files are keeped untouched."
  echo ""
}

version() {
  echo "bootstrap script for mk"
}

# optional flags (default values)
PREFIX=
UPDATE=no
USER=$(id -un)
GROUP=$(id -gn)

# parse command line arguments
# =============================================================================
if [[ -z "$@" ]]; then
  usage; exit 0
fi
while true; do
  case "$1" in
    -h|--help)    usage; exit 0;;
    -v|--version) version; exit 0;;
    --update)     UPDATE=yes;;
    -*)           error "Invalid option '$1'"; exit 1;;
    *)            break;;
  esac
  shift
done
PREFIX=$1
shift
if [[ -z "$PREFIX" ]]; then
  error "Missing prefix"
  exit 1
fi
if [[ -n "$@" ]]; then
  error "Unknown arguments '$@'"
  exit 1
fi

# setting the traps
# =============================================================================
die() {
  local signal=$1; shift
  local tmpdir=$2; shift
  rm -rf $tmpdir &> /dev/null || true
  error "Aborting... ($signal)"

  trap - "$signal"
  kill "-$signal" "$$"
}
error_exit() {
  local tmpdir=$1; shift
  rm -rf "$tmpdir"

  trap - EXIT
  exit 1
}
for signal in EXIT TERM HUP QUIT; do
  trap "die $signal $TMPDIR" "$signal"
done
trap "error_exit $TMPDIR" ERR

# check the prefix directory
# =============================================================================
if [[ -d $PREFIX ]]; then
  # update process
  if [[ $UPDATE = "yes" ]]; then
    # check if a previous installation exists
    for dir in bin etc lmod; do
      if [[ ! -d $PREFIX/$dir ]]; then
        error "The directory does not contain any valid installation."
        exit 1
      fi
    done
  # directory is not empty
  elif [[ -n "$(ls -A $PREFIX)" ]]; then
    if prompt "Directory '$PREFIX' is not empty. Do you want to remove its content?"; then
      rm -vrf $PREFIX/*
    else
      echo "Aborting..."; exit 1
    fi
  fi
  # fix the permissions
  chown -v $USER:$GROUP $PREFIX
  chmod -v 0755 $PREFIX
else
  # exists but is not a directory
  if [[ -e $PREFIX ]]; then
    if [[ $UPDATE = "yes" ]]; then
      echo "You cannot update a non existing installation!"
      UPDATE=no
    fi
    if prompt "File '$PREFIX' already exists. Do you want to remove it?'"; then
      rm -v $PREFIX
    fi
  fi
  install -vd -m 0755 $PREFIX
fi

# create filesystem hierarchy
# =============================================================================
if [[ $UPDATE = "yes" ]]; then
  rm -rf $PREFIX/{bin,lmod}
fi
install -vd -m 0755 $PREFIX/{bin,etc,lmod,modules,pkgs}

# prepare the temporary directory
# =============================================================================
TMPDIR=$(mktmpdir)
install -d "$TMPDIR/src"
pushd "$TMPDIR/src"

# install the muslc for static linking
# =============================================================================
pkgname=musl
pkgver=$musl_version
download http://www.musl-libc.org/releases/$pkgname-$pkgver.tar.gz
extract $pkgname-$pkgver.tar.gz
pushd $pkgname-$pkgver
  CFLAGS="-O2" ./configure --prefix=$TMPDIR --disable-shared; make install
popd

pkgname=kernel-headers
pkgver=$kernel_version
download https://github.com/sabotage-linux/$pkgname/archive/v$pkgver.tar.gz
extract v$pkgver.tar.gz
pushd $pkgname-$pkgver
  make ARCH=$(uname -m) prefix=$TMPDIR install
popd

# install the administration tools: patchelf, bash, busybox
# =============================================================================
pkgname=patchelf
pkgver=$patchelf_version
download https://github.com/NixOS/$pkgname/archive/$pkgver.tar.gz
extract $pkgver.tar.gz
pushd $pkgname-$pkgver
  ./bootstrap.sh
  CFLAGS="-Os" LDFLAGS="-static -static-libgcc -static-libstdc++" ./configure
  make
  strip --strip-unneeded src/patchelf
  install -vm 0755 src/patchelf $PREFIX/bin/patchelf
popd

pkgname=bash
pkgver=$bash_version
download http://ftp.gnu.org/gnu/$pkgname/$pkgname-$pkgver.tar.gz
extract $pkgname-$pkgver.tar.gz
pushd $pkgname-$pkgver
  CC=$TMPDIR/bin/musl-gcc \
  ./configure --prefix=$PREFIX --without-bash-malloc --disable-nls
  make
  strip --strip-unneeded bash
  install -vm 0755 bash $PREFIX/bin/bash
popd

pkgname=busybox
pkgver=$busybox_version
download http://busybox.net/downloads/$pkgname-$pkgver.tar.bz2
extract $pkgname-$pkgver.tar.bz2
pushd $pkgname-$pkgver
  # see http://www.openwall.com/lists/musl/2012/10/08/2
  [[ -r $DIR/$pkgname-$pkgver.patch ]] && patch -p1 -i $DIR/$pkgname-$pkgver.patch
  cp -v $DIR/$pkgname-$pkgver.config .config
  make V=1 CC=$TMPDIR/bin/musl-gcc
  install -vm 0755 busybox $PREFIX/bin/busybox
popd

# compose the lua source (static)
# =============================================================================
mkdir -vp lua/{src,include}

pkgname=lua
pkgver=$lua_version
download http://www.lua.org/ftp/$pkgname-$pkgver.tar.gz
extract $pkgname-$pkgver.tar.gz
cp $pkgname-$pkgver/src/*.c lua/src
cp $pkgname-$pkgver/src/*.h lua/include

download https://raw.githubusercontent.com/antirez/linenoise/master/linenoise.c \
         lua/src/linenoise.c
download https://raw.githubusercontent.com/antirez/linenoise/master/linenoise.h \
         lua/include/linenoise.h
download https://raw.githubusercontent.com/hoelzro/lua-linenoise/master/linenoise.c \
         lua/src/linenoise-lua.c

download https://raw.githubusercontent.com/keplerproject/luafilesystem/master/src/lfs.c \
         lua/src/lfs.c
download https://raw.githubusercontent.com/keplerproject/luafilesystem/master/src/lfs.h \
         lua/include/lfs.h

download https://raw.githubusercontent.com/stevedonovan/luabuild/master/modules/luaposix/lua52compat.h \
         lua/include/lua52compat.h
download https://raw.githubusercontent.com/stevedonovan/luabuild/master/modules/luaposix/lposix.c \
         lua/src/lposix.c

sed -e "s:/usr/local:$PREFIX:g" -i lua/include/luaconf.h
sed '13,17d' -i lua/include/lua52compat.h
cat > lua/include/config.h << EOF
#define VERSION "5.1.20"
#define HAVE_CRYPT 1
#define HAVE_CRYPT_H 1
#define HAVE_STATVFS 1
#define HAVE_SYS_STATVFS_H 1
EOF

CFLAGS="-O2 -Wall -DLUA_USE_POSIX -DLUA_COMPAT_5_2 -DLUA_USE_LINENOISE"
CPPFLAGS="-I$(pwd)/lua/include"
LDFLAGS="-Wl,-s -Wl,-E"
pushd lua/src
  [[ -r $DIR/$pkgname-$pkgver.patch ]] && patch -p1 -i $DIR/$pkgname-$pkgver.patch
  for file in $(ls -A); do
    $TMPDIR/bin/musl-gcc $CPPFLAGS $CFLAGS -c $file
  done
  $TMPDIR/bin/musl-gcc $(ls *.o | grep -v ^luac.o) $LDFLAGS -o lua
  $TMPDIR/bin/musl-gcc $(ls *.o | grep -v ^lua.o) $LDFLAGS -o luac
  install -m 0755 lua $PREFIX/bin/lua
  install -m 0755 luac $PREFIX/bin/luac
popd

# Lmod
# =============================================================================
pkgname=Lmod
pkgver=$lmod_version
download https://github.com/TACC/Lmod/archive/$pkgver.tar.gz
extract $pkgver.tar.gz
pushd $pkgname-$pkgver
  PATH=$PREFIX/bin:$PATH \
  ./configure --prefix=$PREFIX --without-tcl \
              --with-lua_include=$TMPDIR/src/lua/include \
              --with-module-root-path=$PREFIX/modules \
              LUAC_PATH=$PREFIX/bin/luac \
              pager=$PREFIX/bin/less \
              luaprog=$PREFIX/bin/lua
  make install
popd

# cleaning up
# =============================================================================
popd
rm -rf $TMPDIR

# configuration scripts
# =============================================================================
for src in $(find $DIR -name \*.in -printf '%P\n'); do
  echo "Installing $PREFIX/etc/${src%.*}"
  sed -e "s:%PREFIX%:$PREFIX:g" $DIR/$src > $PREFIX/etc/${src%.*}
done
if [[ $UPDATE = "no" ]]; then
  sed -e "s:%PREFIX%:$PREFIX:g" $DIR/../mk.config.in > $PREFIX/etc/mk.config
fi
install -m 0755 $DIR/../mkpkg $PREFIX/bin/mkpkg
sed -e "1s;^;#!$PREFIX/bin/bash\n;" -i $PREFIX/bin/mkpkg

# exit without problems
trap - EXIT
exit 0
